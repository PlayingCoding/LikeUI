@row-prefix-cls: ~"@{iku-prefix}-row";
@col-prefix-cls: ~"@{iku-prefix}-col";

.@{row-prefix-cls} {
  .make-row();
  display: block;

  &-flex {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;

    &:before,
    &:after {
      display: flex;
    }
    // 水平方向从左向右
    &-start {
      justify-content: flex-start;
    }
    // 水平方向从右向左
    &-end {
      justify-content: flex-end;
    }
    // 水平方向居中
    &-center {
      justify-content: center;
    }
    // 水平方向等分（间距）
    &-space-around {
      justify-content: space-around;
    }
    // 水平方向等分
    &-space-between {
      justify-content: space-between;
    }
    // 垂直方向从上到下
    &-top {
      align-items: flex-start;
    }
    // 垂直方向居中
    &-middle {
      align-items: center;
    }
    // 垂直方向从下到上
    &-bottom {
      align-items: flex-end;
    }
  }
}

.@{col-prefix-cls} {
  position: relative;
  display: block;
}

.make-grid();

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

.make-grid(-xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: @screen-sm-min) {
  .make-grid(-sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-md-min) {
  .make-grid(-md);
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-min) {
  .make-grid(-lg);
}

// Extra large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-xl-min) {
  .make-grid(-xl);
}

.make-row(@gutter: @grid-gutter-width) {
  position: relative;
  margin-left: (@gutter / -2);
  margin-right: (@gutter / -2);
  height: auto;
  .clearfix;
}

.float-grid-columns(@class) {
  .col(@index) {
    @item: ~".@{col-prefix-cls}-span@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index <= @grid-columns) {
    @item: ~".@{col-prefix-cls}-span@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) {
    @{list} {
      float: left;
      flex: 0 0 auto;
    }
  }
  .col(1);
}

.loop-grid-columns(@index, @class) when (@index > 0) {
  .@{col-prefix-cls}-span@{class}-@{index} {
    display: block;
    width: percentage((@index / @grid-columns));
  }
  .@{col-prefix-cls}@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
  .@{col-prefix-cls}@{class}-pull-@{index} {
    left: percentage((@index / @grid-columns));
  }
  .@{col-prefix-cls}@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
  .@{col-prefix-cls}@{class}-order-@{index} {
    order: @index;
  }
  .loop-grid-columns((@index - 1), @class);
}

.loop-grid-columns(@index, @class) when (@index = 0) {
  .@{col-prefix-cls}-span@{class}-@{index} {
    display: none;
  }
  .@{col-prefix-cls}@{class}-push-@{index} {
    left: auto;
  }
  .@{col-prefix-cls}@{class}-pull-@{index} {
    right: auto;
  }
}

.make-grid(@class: ~"") {
  .float-grid-columns(@class);
  .loop-grid-columns(@grid-columns, @class);
}
